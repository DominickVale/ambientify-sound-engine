apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
import org.apache.tools.ant.filters.ReplaceTokens
import java.nio.file.Paths

def fmodApiRoot = project.file('./libs/fmod/api').absolutePath

buildscript {
  ext {
    kotlinVersion='1.7.10'
    androidBuildToolsVersion='4.2.2'
    downloadTaskVersion='4.1.2'
  }
  repositories {
    google()
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:${project.ext.androidBuildToolsVersion}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${project.ext.kotlinVersion}"
    classpath "de.undercouch:gradle-download-task:${project.ext.downloadTaskVersion}"
  }
}

apply plugin: 'com.android.library'
apply plugin: 'de.undercouch.download'

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['ASoundEngine_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['ASoundEngine_' + name]).toInteger()
}

static def findNodeModules(baseDir) {
  def basePath = baseDir.toPath().normalize()
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    def nodeModulesPath = Paths.get(basePath.toString(), "node_modules")
    def reactNativePath = Paths.get(nodeModulesPath.toString(), "react-native")
    if (nodeModulesPath.toFile().exists() && reactNativePath.toFile().exists()) {
      return nodeModulesPath.toString()
    }
    basePath = basePath.getParent()
  }
  throw new GradleException("ASoundEngine: Failed to find node_modules/ path!")
}

def nodeModules = findNodeModules(projectDir);
logger.warn("ASoundEngine: node_modules/ found at: ${nodeModules}");

def reactNative = new File("$nodeModules/react-native")

def reactProperties = new Properties()
file("$nodeModules/react-native/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }
def REACT_NATIVE_VERSION = reactProperties.getProperty("VERSION_NAME").split("\\.")[1].toInteger()

def CMAKE_NODE_MODULES_DIR = project.getProjectDir().getParentFile().getParent()

def jsRuntimeDir = {
  if (REACT_NATIVE_VERSION >= 69) {
      return Paths.get(CMAKE_NODE_MODULES_DIR, "react-native", "sdks", "hermes")
  } else {
      return Paths.get(CMAKE_NODE_MODULES_DIR, "hermes-engine")
  }
}.call()

android {

  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
  buildToolsVersion getExtOrDefault('buildToolsVersion')

  defaultConfig {
    minSdkVersion getExtOrDefault('minSdkVersion')
    targetSdkVersion getExtOrDefault('targetSdkVersion')

    buildTypes {
      debug {
        buildConfigField("String[]", "FMOD_LIBS", "{ \"fmodL\" }")
        externalNativeBuild {
          cmake {
            cppFlags "-fexceptions", "-frtti", "-std=c++1y", "-DONANDROID"
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            arguments '-DANDROID_STL=c++_shared', "-DNODE_MODULES_DIR=${nodeModules}", "-DREACT_NATIVE_VERSION=${REACT_NATIVE_VERSION}", "-DJS_RUNTIME_DIR=${jsRuntimeDir}", "-DFMOD_API_ROOT=${fmodApiRoot}", '-DFMOD_LIB_SUFFIX=L'
          }
        }
      }
      release {
        buildConfigField("String[]", "FMOD_LIBS", "{ \"fmod\" }")
        externalNativeBuild {
          cmake {
            cppFlags "-fexceptions", "-frtti", "-std=c++1y", "-DONANDROID"
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            arguments '-DANDROID_STL=c++_shared', "-DNODE_MODULES_DIR=${nodeModules}", "-DREACT_NATIVE_VERSION=${REACT_NATIVE_VERSION}", "-DJS_RUNTIME_DIR=${jsRuntimeDir}", "-DFMOD_API_ROOT=${fmodApiRoot}", '-DFMOD_LIB_SUFFIX='
          }
        }
      }
    }

    externalNativeBuild {
      cmake {
        cppFlags ''
        abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        arguments '-DANDROID_STL=c++_shared', "-DNODE_MODULES_DIR=${nodeModules}", "-DREACT_NATIVE_VERSION=${REACT_NATIVE_VERSION}", "-DJS_RUNTIME_DIR=${jsRuntimeDir}", "-DFMOD_API_ROOT=${fmodApiRoot}", '-DFMOD_LIB_SUFFIX=L'
      }
    }
  }

  packagingOptions {
    // Exclude all Libraries that are already present in the user's app (through React Native or by him installing REA)
    excludes = ["**/libc++_shared.so", "**/libfbjni.so", "**/libjsi.so", "**/libreactnativejni.so", "**/libfolly_json.so", "**/libjscexecutor.so", "**/libhermes.so"]
    exclude "META-INF/**"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    abortOnError false
    disable 'GradleCompatible'
  }

  externalNativeBuild {
    cmake {
      path 'CMakeLists.txt'
      version '3.18.1'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  configurations {
    extractHeaders
    extractJNI
  }
    ndkVersion '23.1.7779620'
}

repositories {
  mavenCentral()
  google()

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = file("$nodeModules/react-native/android")
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
              parentDir,
              'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
              parentDir,
              'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
            "${project.name}: unable to locate React Native android sources. " +
                    "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}


dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${project.ext.kotlinVersion}"
  implementation 'androidx.activity:activity-ktx:1.7.0-alpha02'
  implementation "androidx.media:media:1.6.0"
  implementation "androidx.work:work-runtime-ktx:2.7.1"
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
  // noinspection GradleDynamicVersion
  api 'com.facebook.react:react-native:+'

  extractHeaders("com.facebook.fbjni:fbjni:0.4.0:headers")
  //noinspection GradleDynamicVersion
  extractJNI("com.facebook.fbjni:fbjni:0.4.0")

  implementation files(fmodApiRoot + '/core/lib/fmod.jar')

  def buildType = "debug"
  tasks.all({ task ->
    if (task.name == "buildCMakeRelease") {
      buildType = "release"
    }
  })
  def rnAarMatcher = "**/react-native/**/*${buildType}.aar"
  if (REACT_NATIVE_VERSION < 69) {
    rnAarMatcher = "**/**/*.aar"
  }
  def rnAAR = fileTree("$reactNative/android").matching({ it.include rnAarMatcher }).singleFile
  def jscAAR = fileTree("${nodeModules}/jsc-android/dist/org/webkit/android-jsc").matching({ it.include "**/**/*.aar" }).singleFile

  extractJNI(files(rnAAR, jscAAR))
}

def downloadsDir = new File("$buildDir/downloads")

task createNativeDepsDirectories {
  doLast {
    downloadsDir.mkdirs()
  }
}


task extractAARHeaders {
  doLast {
    configurations.extractHeaders.files.each {
      def file = it.absoluteFile
      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "**/*.h"
      }
    }
  }
}

extractAARHeaders.mustRunAfter createNativeDepsDirectories

task extractJNIFiles {
  doLast {
    configurations.extractJNI.files.each {
      def file = it.absoluteFile

      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "jni/**/*"
      }
    }
  }
}

extractJNIFiles.mustRunAfter extractAARHeaders

// pre-native build pipeline

tasks.whenTaskAdded { task ->
  if (!task.name.contains('Clean') && (task.name.contains('externalNative') || task.name.contains('CMake'))) {
    task.dependsOn(extractAARHeaders)
    task.dependsOn(extractJNIFiles)
  }
}
