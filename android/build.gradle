apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
import org.apache.tools.ant.filters.ReplaceTokens
import java.nio.file.Paths

def fmodApiRoot = project.file('./libs/fmod/api').absolutePath

buildscript {
  ext {
    kotlinVersion='1.8.0'
    downloadTaskVersion='5.0.1'
  }
  repositories {
    google()
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.2"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${project.ext.kotlinVersion}"
    classpath "de.undercouch:gradle-download-task:${project.ext.downloadTaskVersion}"
  }
}

apply plugin: 'de.undercouch.download'

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def reactNativeArchitectures() {
  def value = project.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
  namespace = "com.ambientifysoundengine"

  compileSdkVersion safeExtGet('compileSdkVersion', 33)
  def agpVersion = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION

  if (agpVersion.tokenize('.')[0].toInteger() >= 8) {
      buildFeatures {
          buildConfig = true
      }
  }

  if (rootProject.hasProperty("ndkPath")) {
    ndkPath rootProject.ext.ndkPath
  }
  if (rootProject.hasProperty("ndkVersion")) {
    ndkVersion rootProject.ext.ndkVersion
  }

 buildFeatures {
    prefab true
  }

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', 26)
    targetSdkVersion safeExtGet('targetSdkVersion', 34)

    buildTypes {
      debug {
        buildConfigField("String[]", "FMOD_LIBS", "{ \"fmodL\" }")
        externalNativeBuild {
          cmake {
            cppFlags "-O2 -frtti -fexceptions -Wall -Wno-unused-variable -fstack-protector-all -DONANDROID"
            arguments '-DANDROID_STL=c++_shared', "-DFMOD_API_ROOT=${fmodApiRoot}", '-DFMOD_LIB_SUFFIX=L'
            abiFilters (*reactNativeArchitectures())
          }
        }
      }
      release {
        buildConfigField("String[]", "FMOD_LIBS", "{ \"fmod\" }")
        externalNativeBuild {
          cmake {
            cppFlags "-O2 -frtti -fexceptions -Wall -Wno-unused-variable -fstack-protector-all -DONANDROID"
            arguments '-DANDROID_STL=c++_shared', "-DFMOD_API_ROOT=${fmodApiRoot}", '-DFMOD_LIB_SUFFIX='
            abiFilters (*reactNativeArchitectures())
          }
        }
      }
    }

    externalNativeBuild {
      cmake {
        cppFlags "-O2 -frtti -fexceptions -Wall -Wno-unused-variable -fstack-protector-all -DONANDROID"
        arguments '-DANDROID_STL=c++_shared', "-DFMOD_API_ROOT=${fmodApiRoot}", '-DFMOD_LIB_SUFFIX=L'
        abiFilters (*reactNativeArchitectures())
      }
    }
  }

  packagingOptions {
    // Exclude all Libraries that are already present in the user's app (through React Native or by him installing REA)
    excludes = [
      "META-INF",
      "META-INF/**",
      "**/libjsi.so",
      "**/libreact_nativemodule_core.so",
      "**/libturbomodulejsijni.so",
      "**/libc++_shared.so",
      "**/libfbjni.so",
      "**/libreactnativejni.so",
      "**/libfolly_json.so",
      "**/libjscexecutor.so",
      "**/libhermes.so"
    ]
  }

  buildTypes {
    release {
      minifyEnabled false
        ndk {
          debugSymbolLevel "FULL"
        }
    }
  }

  externalNativeBuild {
    cmake {
      path 'CMakeLists.txt'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }
}

repositories {
  mavenCentral()
  google()
}


dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${project.ext.kotlinVersion}"
  implementation 'androidx.activity:activity-ktx:1.7.0-alpha02'
  implementation "androidx.media:media:1.6.0"
  implementation "androidx.work:work-runtime-ktx:2.7.1"
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-android:+'

  implementation files(fmodApiRoot + '/core/lib/fmod.jar')

  // Resolves "LOCAL_SRC_FILES points to a missing file, Check that libfb.so exists or that its path is correct".
  tasks.whenTaskAdded { task ->
    if (task.name.contains("configureCMakeDebug")) {
      rootProject.getTasksByName("packageReactNdkDebugLibs", true).forEach {
        task.dependsOn(it)
      }
    }
    // We want to add a dependency for both configureCMakeRelease and configureCMakeRelWithDebInfo
    if (task.name.contains("configureCMakeRel")) {
      rootProject.getTasksByName("packageReactNdkReleaseLibs", true).forEach {
        task.dependsOn(it)
      }
    }
  }
}
